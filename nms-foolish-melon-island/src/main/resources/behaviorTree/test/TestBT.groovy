package behaviorTree.test
// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// Export file: exported/TestBT.groovy
// ---------------------------------------------------------------------

import com.t13max.ai.behavior4j.BTNode
import com.t13max.ai.behavior4j.attachments.PostActionNode
import com.t13max.ai.behavior4j.attachments.PreActionNode
import com.t13max.ai.behavior4j.leaf.ActionNode
import com.t13max.ai.behavior4j.leaf.ConditionNode
import com.t13max.nms.ai.agent.MonsterAgent

class TestBTDfn {
	Map<Integer, BTNode<MonsterAgent>> data = new HashMap<>();

	{
		
		data.put(24, new PreActionNode24())
		data.put(23, new PostActionNode23())
		data.put(5, new ActionNode5())
		data.put(38, new ConditionNode38())
		data.put(43, new ConditionNode43())
		data.put(41, new ConditionNode41())
		data.put(42, new ConditionNode42())
		data.put(44, new ConditionNode44())
		data.put(47, new ConditionNode47())
	}

	BTNode<MonsterAgent> getNode(int id) {
		return data.get(id)
	}


	/**
	* NODE :ActionNode
	* @Description: 
	**/
	class ActionNode5 extends ActionNode<MonsterAgent> {
	
			@Override
			Status execute() {
				getAgent().say("testing");
				return Status.BT_SUCCESS
			}
	}

	/**
	* ATTACHMENT :PreActionNode
	**/
	class PreActionNode24 extends PreActionNode<MonsterAgent> {
		@Override
		boolean preCondition() {
			 return getAgent().testBoolean(true) == true;
		}
	}
	/**
	* ATTACHMENT :PostActionNode
	**/
	class PostActionNode23 extends PostActionNode<MonsterAgent> {
		@Override
		void doEffect() {
			 getAgent().say("effect");
		}
	}

	/**
	* NODE :ConditionNode
	* @Description: 
	**/
	class ConditionNode38 extends ConditionNode<MonsterAgent> {
	
			Object operatorLeft() {
				return getAgent().testBoolean(true)
			}
			Object operatorRight() {
				return true
			}
			@Override
			boolean condition() {
				return operatorLeft() && operatorRight()
			}
	}


	/**
	* NODE :ConditionNode
	* @Description: 
	**/
	class ConditionNode43 extends ConditionNode<MonsterAgent> {
	
			Object operatorLeft() {
				return getAgent().testBoolean(false)
			}
			Object operatorRight() {
				return true
			}
			@Override
			boolean condition() {
				return operatorLeft() || operatorRight()
			}
	}


	/**
	* NODE :ConditionNode
	* @Description: 
	**/
	class ConditionNode41 extends ConditionNode<MonsterAgent> {
	
			Object operatorLeft() {
				return getAgent().testBoolean(false)
			}
			Object operatorRight() {
				return true
			}
			@Override
			boolean condition() {
				return operatorLeft() != operatorRight()
			}
	}


	/**
	* NODE :ConditionNode
	* @Description: 
	**/
	class ConditionNode42 extends ConditionNode<MonsterAgent> {
	
			Object operatorLeft() {
				return getAgent().testBoolean(true)
			}
			Object operatorRight() {
				return true
			}
			@Override
			boolean condition() {
				return operatorLeft() == operatorRight()
			}
	}


	/**
	* NODE :ConditionNode
	* @Description: 
	**/
	class ConditionNode44 extends ConditionNode<MonsterAgent> {
	
			Object operatorLeft() {
				return getAgent().testBoolean(false)
			}
			Object operatorRight() {
				return true
			}
			@Override
			boolean condition() {
				return operatorLeft() != operatorRight()
			}
	}


	/**
	* NODE :ConditionNode
	* @Description: 
	**/
	class ConditionNode47 extends ConditionNode<MonsterAgent> {
	
			Object operatorLeft() {
				return getAgent().testBoolean(false)
			}
			Object operatorRight() {
				return true
			}
			@Override
			boolean condition() {
				return operatorLeft() == operatorRight()
			}
	}

}
