<?xml version="1.0" encoding="utf-8"?>
<!--EXPORTED BY TOOL, DON'T MODIFY IT!-->
<!--Source File: TestBT.xml-->
<behavior name="TestBT" agenttype="TestAgent" version="5">
    <node class="Sequence" id="0">
        <node class="Sequence" id="1">
            <node class="Noop" id="3"/>
            <node class="ActionNode" id="5">
                <property Method="Self.TestAgent::say(&quot;testing&quot;)"/>
                <property ResultOption="BT_SUCCESS"/>
                <attachment class="PreActionNode" id="24" flag="precondition">
                    <property BinaryOperator="And"/>
                    <property Operator="Equal"/>
                    <property Opl="Self.TestAgent::testBoolean(true)"/>
                    <property Opr2="const Boolean true"/>
                    <property Phase="Enter"/>
                </attachment>
                <attachment class="PostActionNode" id="23" flag="effector">
                    <property Operator="Invalid"/>
                    <property Opl="Self.TestAgent::say(&quot;effect&quot;)"/>
                    <property Phase="Success"/>
                </attachment>
            </node>
        </node>
        <node class="Selector" id="2">
            <node class="Log" id="4" DecorateWhenChildEnds="false" Log="helloWorld">
                <node class="Noop" id="14"/>
            </node>
            <node class="Not" id="6" DecorateWhenChildEnds="false">
                <node class="Noop" id="15"/>
            </node>
            <node class="Repeat" id="7" Count="5" DecorateWhenChildEnds="true" DoneWithinFrame="false">
                <node class="Noop" id="16"/>
            </node>
            <node class="UntilFailure" id="8" Count="-1" DecorateWhenChildEnds="true">
                <node class="Noop" id="17"/>
            </node>
            <node class="UntilSuccess" id="9" Count="-1" DecorateWhenChildEnds="true">
                <node class="Noop" id="18"/>
            </node>
            <node class="UntilSuccess" id="10" Count="-1" DecorateWhenChildEnds="true">
                <node class="Noop" id="19"/>
            </node>
            <node class="AlwaysFailure" id="11" DecorateWhenChildEnds="false">
                <node class="Noop" id="20"/>
            </node>
            <node class="AlwaysSuccess" id="13" DecorateWhenChildEnds="false">
                <node class="Noop" id="22"/>
            </node>
        </node>
        <node class="RandomSelector" id="12">
            <node class="Noop" id="21"/>
        </node>
        <node class="RandomSequence" id="25">
            <node class="Noop" id="26"/>
        </node>
        <node class="ProbabilitySelector" id="27">
            <node class="DecoratorWeight" id="28" DecorateWhenChildEnds="false" Weight="3">
                <node class="Noop" id="29"/>
            </node>
            <node class="DecoratorWeight" id="30" DecorateWhenChildEnds="false" Weight="4">
                <node class="Noop" id="31"/>
            </node>
        </node>
        <node class="ReferencedBehavior" id="33" ReferenceBehavior="SubBT"/>
        <node class="Selector" id="35">
            <node class="Noop" id="36"/>
            <node class="Sequence" id="37">
                <node class="Noop" id="34"/>
            </node>
        </node>
        <node class="Repeat" id="48" Count="5" DecorateWhenChildEnds="true" DoneWithinFrame="false">
            <node class="Noop" id="49"/>
        </node>
        <node class="DecoratorLoopUntil" id="50" Count="-1" DecorateWhenChildEnds="true" Until="true">
            <node class="Noop" id="51"/>
        </node>
        <node class="ConditionNode" id="38">
            <property Operator="And"/>
            <property Opl="Self.TestAgent::testBoolean(true)"/>
            <property Opr="const Boolean true"/>
        </node>
        <node class="Or" id="39">
            <node class="ConditionNode" id="43">
                <property Operator="Or"/>
                <property Opl="Self.TestAgent::testBoolean(false)"/>
                <property Opr="const Boolean true"/>
            </node>
            <node class="ConditionNode" id="41">
                <property Operator="NotEqual"/>
                <property Opl="Self.TestAgent::testBoolean(false)"/>
                <property Opr="const Boolean true"/>
            </node>
        </node>
        <node class="And" id="40">
            <node class="ConditionNode" id="42">
                <property Operator="Equal"/>
                <property Opl="Self.TestAgent::testBoolean(true)"/>
                <property Opr="const Boolean true"/>
            </node>
            <node class="ConditionNode" id="44">
                <property Operator="NotEqual"/>
                <property Opl="Self.TestAgent::testBoolean(false)"/>
                <property Opr="const Boolean true"/>
            </node>
        </node>
        <node class="DecoratorCountLimit" id="45" Count="-1" DecorateWhenChildEnds="true">
            <custom>
                <node class="ConditionNode" id="47">
                    <property Operator="Equal"/>
                    <property Opl="Self.TestAgent::testBoolean(false)"/>
                    <property Opr="const Boolean true"/>
                </node>
            </custom>
            <node class="Noop" id="46"/>
        </node>
        <node class="End" id="32" EndOutside="true" EndStatus="Success"/>
    </node>
</behavior>